package com.msft.stardust

import com.msft.stardust.model.StardustDocument
import com.msft.stardust.model.proxies.*
import org.junit.After
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.yaml.snakeyaml.Yaml
import java.io.File

class ProxiesTest {

    @Before
    fun setup() {
        global_documentType = DocumentType.ROOT
        global_projectRoot = testProjectPath
        configFlavor("main")

        // this is needed to load all enums in memory
        Generator().apply {
            add(StylesheetDocument("${YAML_PATH}/GenericStyle.yml", DocumentType.ROOT))
            generate()
        }
        File(testProjectPath).deleteRecursively()
    }

    @After
    fun tearDown() {
        File(testProjectPath).deleteRecursively()
    }

    @Test
    fun `Proxies generation`() {
        testAP(Button(), 3)
    }

    @Test
    fun `Proxies inheritance`() {
// FIXME
//        testAP(Button(type = Button.Type.Circular()), 0, "Button")
//        testAP(Button(type = Button.Type.Text()), 0, "Button")
    }

    @Test
    fun `Button resources`() {
        var document = "${AP_PREFIX}ButtonTokens:\n"

        document += "  color: [rest: \$Color.black.normal, hover: \$Color.black.normal, pressed: \$Color.black.normal, selected: \$Color.black.normal, disabled: \$Color.black.normal]\n" +
                    "  backgroundColor: [rest: \$Color.black.normal, hover: \$Color.black.normal, pressed: \$Color.black.normal, selected: \$Color.black.normal, disabled: \$Color.black.normal]\n" +
                    "  borderColor: [rest: \$Color.black.normal, hover: \$Color.black.normal, pressed: \$Color.black.normal, selected: \$Color.black.normal, disabled: \$Color.black.normal]\n" +
                    "  borderWidth: [rest: \$Color.black.normal, hover: \$Color.black.normal, pressed: \$Color.black.normal, selected: \$Color.black.normal, disabled: \$Color.black.normal]"

        Yaml().loadAs(document, StardustDocument::class.java).generate()

        listOf("").forEach { apStyle ->
            listOf(
                File("$global_flavorPath/res/color/buttontokensview_${apStyle}bordercolor.xml"),
                File("$global_flavorPath/res/color/buttontokensview_${apStyle}backgroundcolor.xml"),
                File("$global_flavorPath/res/color/buttontokensview_${apStyle}color.xml"),
                File("$global_flavorPath/res/color-v21/buttontokensview_${apStyle}backgroundcolor.xml")
            ).forEach { Assert.assertTrue(it.exists()) }
        }
    }


    private fun testAP(appearanceProxy: AppearanceProxy, attributesCount: Int, parentAp: String? = null, isView: Boolean = true) {
        var document = if (parentAp != null)
            "$AP_PREFIX$parentAp:\n parentRes: \"#FFFFFF\"\n${appearanceProxy.stylesheetName}$EXTENSION_TAG$parentAp"
        else
            "$AP_PREFIX${appearanceProxy.stylesheetName}"

        document +=":\n res: \"#FFFFFF\""

        val doc = Yaml().loadAs(document, StardustDocument::class.java)
        doc.generate()

        val resourcesFile = File("$global_flavorPath/res/values/${appearanceProxy.viewName.toLowerCase()}_res.autogenerated.xml")
        Assert.assertTrue(resourcesFile.exists())
        resourcesFile.readText().let {fileContent ->
            Assert.assertTrue(fileContent.contains("<color name=\"${appearanceProxy.viewName.toLowerCase()}_res\">#FFFFFF</color>"))
            if (parentAp != null) Assert.assertTrue(fileContent.contains("<color name=\"${appearanceProxy.viewName.toLowerCase()}_parentRes\">#FFFFFF</color>"))
        }

        if (isView) {
            val attributesFile =
                File("$global_flavorPath/res/values/${appearanceProxy.viewName.toLowerCase()}_attrs.autogenerated.xml")
            if (attributesCount > 0) {
                Assert.assertTrue(attributesFile.exists())
                Assert.assertEquals(
                    attributesCount,
                    "<attr".toRegex().findAll(attributesFile.readText()).count()
                )
            } else {
                Assert.assertFalse(attributesFile.exists())
            }
        }

        File(testProjectPath).deleteRecursively()
    }
}
