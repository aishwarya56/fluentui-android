package com.microsoft.fluentui.generator.model.resources

import com.microsoft.fluentui.generator.AUTOGENERATED_XML_HEADER
import com.microsoft.fluentui.generator.global_flavorPath
import com.microsoft.fluentui.generator.writeToResourceFile

enum class StyleKeys(val androidKey: String) {
    TEXT_COLOR("textColor"), DRAWABLE_TINT("drawableTint"), BACKGROUND("background"), MAX_LINES("maxLines"), TEXT_ALL_CAPS("textAllCaps"),
    ELLIPSIZE("ellipsize"), GRAVITY("gravity"), CLICKABLE("clickable"), MIN_HEIGHT("minHeight"), MAX_HEIGHT("maxHeight"),
    MIN_WIDTH("minWidth"), MAX_WIDTH("maxWidth"),PADDING_TOP("paddingTop"),PADDING_BOTTOM("paddingBottom"),
    PADDING("padding"), PADDING_START("paddingStart"), PADDING_END("paddingEnd"),
    TINT("tint"), ADJUST_VIEW_BOUNDS("adjustViewBounds"), SCALE_TYPE("scaleType"), TEXT_SIZE("textSize"), TEXT_STYLE("textStyle"),
    FONT_FAMILY("fontFamily"),FONT_WEIGHT("fontWeight"),
    TEXT_APPEARANCE("textAppearance")
}

data class Style(val name: String, val parentName: String?, val values: Map<StyleKeys, String>, val includeTint: Boolean = true)


fun generateStyles(name:String, styles: List<Style>) {
    generateStyles(name, styles, false)
}

fun generateStyles(name:String, styles: List<Style>, isVersion26Supported: Boolean) {
    StringBuilder().apply {
        append(AUTOGENERATED_XML_HEADER)
        append("<resources xmlns:android=\"http://schemas.android.com/apk/res/android\">\n")

        styles.forEach { style ->
            if (style.parentName != null) {
                append("\n\t<style name=\"${style.name}\" parent=\"${style.parentName}\">\n")
            }
            else {
                append("\n\t<style name=\"${style.name}\">\n")
            }
            style.values.forEach {
                if (isVersion26Supported && it.key.androidKey == StyleKeys.FONT_WEIGHT.androidKey) {
                    append("\t\t<item name=\"android:${it.key.androidKey}\">${it.value}</item>\n")
                }
                else if(it.key.androidKey != StyleKeys.FONT_WEIGHT.androidKey){
                    append("\t\t<item name=\"android:${it.key.androidKey}\">${it.value}</item>\n")
                }
            }

            // Force the tint value to be the same as the text color in case this style is applied to
            // an image view
            if (style.includeTint && !style.values.containsKey(StyleKeys.TINT)) {
                append("\t\t<item name=\"android:${StyleKeys.TINT.androidKey}\">${style.values[StyleKeys.TEXT_COLOR]}</item>\n")
            }

            append("\t</style>\n")
        }
        append("</resources>")

        if (isVersion26Supported) {
            toString().writeToResourceFile(
                    global_flavorPath.plus("res/values-v26/${name}_styles.autogenerated.xml"),
                    "${styles.count()} styles"
            )
        }
        else{
            toString().writeToResourceFile(
                    global_flavorPath.plus("res/values/${name}_styles.autogenerated.xml"),
                    "${styles.count()} styles"
            )
        }
    }
}