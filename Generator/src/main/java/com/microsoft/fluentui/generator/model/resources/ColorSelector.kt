package com.microsoft.fluentui.generator.model.resources

import com.microsoft.fluentui.generator.*

fun generateColorSelector(sourcePath: String, name: String, values: ArrayList<*>, legacyOnly: Boolean = false) {
    intGenerateColorSelector(values, false).writeToResourceFile(sourcePath.plus("res/color${global_documentType.identifierString()}/$name.xml".toLowerCase()), "Color selector")
    if (name.toLowerCase().contains("backgroundcolor") && !legacyOnly) {
        intGenerateColorSelector(values, true).writeToResourceFile(
            sourcePath.plus("res/color${global_documentType.identifierString()}-v21/$name.xml".toLowerCase()),
            "Color selector"
        )
    }
}

private fun intGenerateColorSelector(values: ArrayList<*>, isBackground: Boolean): String {
    return StringBuilder().apply {
        append(AUTOGENERATED_XML_HEADER)
        append("<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n")

        val states = hashMapOf<Int, String>()
        values.forEach {
            if (it is LinkedHashMap<*, *>) {
                val colorValue = it.values.single().toString().autoResolveReference()
                when (it.keys.single().toString()) {
                    "rest" -> states[5] = "<item android:color=\"$colorValue\"/>"
                    "selected" -> states[3] = "<item android:state_activated=\"true\" android:color=\"$colorValue\"/>"
                    "pressed" -> if (!isBackground) states[1] = "<item android:state_pressed=\"true\" android:color=\"$colorValue\"/>"
                    "hover" -> states[1] = "<item android:state_focused=\"true\" android:color=\"$colorValue\"/>"
                    "disabled" -> states[4] =
                            "<item android:state_enabled=\"false\" android:color=\"$colorValue\"/>"
                }
            }
        }

        states.toSortedMap().forEach { append("\t${it.value}\n") }
        append("</selector>")
    }.toString()
}


private val selectorKeys = listOf("rest", "hover", "pressed", "selected", "disabled")

// color: [rest: $Colors.Neutral.clear, hover: $Colors.Neutral.clear, pressed: $Colors.Neutral.clear, selected: $Colors.Neutral.clear, disabled: $Colors.Neutral.clear]
fun isColorSelector(node: Any): Boolean {
    var isSelector = false
    if (node is ArrayList<*>) {
        isSelector = true
        node.forEach {
            if (it is LinkedHashMap<*, *>) {
                if (!selectorKeys.contains(it.keys.single()) ||
                        !it.values.single().toString().autoResolveReference().isValidColor()
                )
                    isSelector = false
            }
        }
    }
    return isSelector
}