package com.microsoft.fluentui.generator.model.resources

import com.microsoft.fluentui.generator.AUTOGENERATED_XML_HEADER
import com.microsoft.fluentui.generator.global_flavorPath
import com.microsoft.fluentui.generator.writeToResourceFile

enum class ShapeKeys {
    STROKE_RADIUS, BACKGROUND_COLOR, STROKE_WIDTH, STROKE_COLOR, SHAPE, RIPPLE_COLOR
}

fun generateShape(name: String, values: Map<ShapeKeys, String>) {

    StringBuilder().apply {
        append(AUTOGENERATED_XML_HEADER)
        append(intGenerateShape(includeNamespace = true, includeItemTag = false, values = values))
        toString().writeToResourceFile(global_flavorPath.plus("res/drawable/$name.xml"), "Shape")
    }

    StringBuilder().apply {
        append(AUTOGENERATED_XML_HEADER)
        append("<ripple xmlns:android=\"http://schemas.android.com/apk/res/android\" android:color=\"${values[ShapeKeys.RIPPLE_COLOR]}\">\n")
        append(intGenerateShape(includeNamespace = false, includeItemTag = true, values = values))
        append("</ripple>")

        toString().writeToResourceFile(global_flavorPath.plus("res/drawable-v21/$name.xml"), "Shape")
    }
}

private fun intGenerateShape(includeNamespace: Boolean, includeItemTag: Boolean, values: Map<ShapeKeys, String>): String {
    return StringBuilder().apply {
        if (includeItemTag) {
            append("<item ${if (includeNamespace) "xmlns:android=\"http://schemas.android.com/apk/res/android\"" else ""}>\n")
        }
        append("\t<shape ${if (includeNamespace && !includeItemTag) "\n\t\txmlns:android=\"http://schemas.android.com/apk/res/android\" \n\t\t" else ""}" +
                "android:shape=\"${values[ShapeKeys.SHAPE]}\">\n")

        values.forEach {
            when (it.key) {
                ShapeKeys.STROKE_RADIUS -> append("\t\t<corners android:radius=\"@dimen/${it.value}\"/>\n")
                ShapeKeys.BACKGROUND_COLOR -> append("\t\t<solid android:color=\"@color/${it.value.toLowerCase()}\"/>\n")
                ShapeKeys.STROKE_COLOR -> {
                    append("\t\t<stroke ")
                    values[ShapeKeys.STROKE_WIDTH]?.let { width -> append("android:width=\"@dimen/$width\" ") }
                    append("android:color=\"@color/${it.value.toLowerCase()}\"/>\n")
                }
                else -> Unit
            }
        }

        append("\t</shape>\n")
        if (includeItemTag) {
            append("</item>\n")
        }
    }.toString()
}