package microsoft.fluentui.generator

import microsoft.fluentui.generator.model.Attribute
import microsoft.fluentui.generator.model.AttributeType
import microsoft.fluentui.generator.model.global_getResourceType
import microsoft.fluentui.generator.model.resources.Resource
import microsoft.fluentui.generator.model.resources.ResourceType
import microsoft.fluentui.generator.model.resources.STRING_PATTERN
import java.io.File
import java.util.*


fun String.writeToResourceFile(path: String, contentDescription: String) {
    File(path).apply {
        if (exists() && !readText().contains(AUTOGENERATED_MESSAGE, ignoreCase = true)) {
            printError("File $path already exists")
        } else {
            parentFile.mkdirs()
            writeText(this@writeToResourceFile)
            println("$contentDescription -> ${this.path}")
            global_resourceCount++

            if (!this@writeToResourceFile.contains(AUTOGENERATED_MESSAGE, ignoreCase = true)) {
                printWarning("File ${this.path} does not contain the autogenerated header")
            }
        }
    }
}

fun String.writeToKotlinFile(path: String, contentDescription: String) {
    File(path).apply {
        if (exists() && !readText().contains(AUTOGENERATED_MESSAGE, ignoreCase = true)) {
            printError("File $path already exists")
        } else {
            parentFile.mkdirs()
            writeText(this@writeToKotlinFile)
            println("$contentDescription -> ${this.path}")
            global_resourceCount++

            if (!this@writeToKotlinFile.contains(AUTOGENERATED_MESSAGE, ignoreCase = true)) {
                printWarning("File ${this.path} does not contain the autogenerated header")
            }
        }
    }
}

fun String.resolveResourceReference(resourceType: ResourceType) = when (this[0]) {
    '$' -> "@${resourceType.resourceName}/".plus(toAndroidReference(resourceType))
    else -> this
}

fun String.autoResolveReference() = when {
    this.startsWith('$') -> {
        when {
            contains("color", ignoreCase = true) -> resolveResourceReference(ResourceType.COLOR)
            contains("typography", ignoreCase = true) -> resolveResourceReference(ResourceType.STYLE)
            isValidMetricRef() -> {
                when (global_getResourceType(toAndroidReference().decapitalize())) {
                    ResourceType.DIMENSION -> resolveResourceReference(ResourceType.DIMENSION)
                    ResourceType.INTEGER-> resolveResourceReference(ResourceType.INTEGER)
                    ResourceType.FLOAT-> resolveResourceReference(ResourceType.DIMENSION)
                    null -> { printWarning("Unknown metric reference \"$this\""); this }
                    else -> { printWarning("Unsupported metric type for \"$this\""); this }
                }
            }
            else -> this
        }
    }
    this.startsWith('#') -> {
        if (length == 9) {
            // alpha value in android is at the beginning #AARRGGBB
            "#" + this.substring(7) + this.substring(1, 7)
        } else this
    }
    isValidEnum() || isValidMask() -> {
        Regex(STRING_PATTERN).findAll(this).single().value.decapitalize().let {
            "@integer/${it.replace('.', '_')}"
        }
    }
    else -> this
}

internal fun String.toProgrammatic() =
    this.replace("@", "R.")
        .replace("/", ".")

/**
 Convert '$reference.value.value2' to 'reference_value_value2'
 */
fun String.toAndroidReference(resourceType: ResourceType? = null) =  when (this[0]) {
    '$' -> substringAfter('$').run {
        if (resourceType?.resNameIsLowercase == true) {
            toLowerCase()
        } else {
            substringBefore('.').toLowerCase() + "." + substringAfter(".")
        }
    }.replace('.', '_')
    else -> this
}

fun MutableList<Resource>.toAttributesList(): MutableList<Attribute> =  mutableListOf<Attribute>().apply {
        this@toAttributesList.forEach {
            add(Attribute(
                it.name,
                when (it.type) {
                    ResourceType.COLOR -> AttributeType.COLOR
                    ResourceType.DIMENSION, ResourceType.TYPOGRAPHY -> AttributeType.DIMENSION
                    ResourceType.BOOLEAN -> AttributeType.BOOLEAN
                    else -> AttributeType.STRING
                })
            )
        }
    }

// this helps with stuff like "borderColor" to "primaryBorderColor"
fun String.prependCamelCase(prefix: String) =
    if (prefix.isBlank()) this else "$prefix${this[0].toUpperCase()}${this.substring(1)}"


fun String.isValidFloat() = matches("\\d*\\.\\d+f?|\\d*f".toRegex())
fun String.isValidDimension() = matches("\\d*\\.?\\d+dp".toRegex()) || matches("\\d*\\.?\\d+pt".toRegex())
fun String.rawValue() = "\\d*\\.?\\d*".toRegex().find(this)?.value ?: this

fun String.isValidColor() = matches("#[0-9a-fA-F]{6,8}".toRegex()).or(startsWith("@color/"))
fun String.isValidTypographyStyle() = startsWith("@style/")
// FIXME: Find a more flexible approach to finding Metrics.
fun String.isValidMetricRef() = startsWith("\$Metric")
        || startsWith("\$Spacing")
        || startsWith("\$Border")
        || startsWith("\$Icon")
fun String.isValidEnum() = startsWith("Enum(")
fun String.isValidMask() = startsWith("Option(")
fun String.isValidTimingFunction() = startsWith("TimingFunction(")

fun String.isValidKey() = !contains(' ')  // we can add more constraints here
fun String.isValidAPKey() = startsWith(AP_PREFIX) || contains(EXTENSION_TAG)
fun String.isValidAnimatorKey() = startsWith(ANIMATOR_PREFIX)

fun String.isValidProgrammaticColor() = startsWith("R.color.")
fun String.isValidProgrammaticStyle() = startsWith("R.style.")
fun String.isValidProgrammaticDimension() = startsWith("R.dimen.")

fun printWarning(message: String) { println("WARNING: $message"); global_warningsCount++ }
fun printError(message: String) { println("ERROR: $message"); global_errorsCount++ }

fun String.enumClassName() =
    this.substringAfterLast(".")
        .substringBefore("_")
        .capitalize()

internal fun String.toJavaEnumValueName() =
    this.replace("([a-z])([A-Z]+)".toRegex(), "$1_$2")
        .replace("([0-9])([A-Za-z]+)".toRegex(), "$1_$2")
        .replace("([a-zA-Z])([0-9]+)".toRegex(), "$1_$2")
        .toUpperCase(Locale.getDefault())

internal fun String.extractEnumValueForStyle() =
    this.removePrefix("Enum(")
        .replaceFirst("([^.]*).".toRegex(), "$1_")
        .removeSuffix(")")
        .decapitalize()