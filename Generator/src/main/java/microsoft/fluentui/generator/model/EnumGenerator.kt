package com.msft.stardust.model

import com.msft.stardust.*
import com.msft.stardust.model.resources.ResourceType
import com.msft.stardust.model.resources.STRING_PATTERN
import java.util.*
import kotlin.collections.HashMap

private const val ENUM_PATTERN = "^EnumDef\\(.*\\)\$"
private const val MASK_PATTERN = "^OptionDef\\(.*\\)\$"

class EnumGenerator : ResourceGenerator("enums") {

    override fun parse(key: String, values: LinkedHashMap<String, Any>?) {
        values?.apply {
            forEach { entry ->
                val value = entry.value.toString()
                when {
                    Regex(ENUM_PATTERN).matches(value) -> parseEntry(key, entry, false)
                    Regex(MASK_PATTERN).matches(value) -> parseEntry(key, entry, true)
                }
            }
        }
    }

    private fun parseEntry(key: String, entry: Map.Entry<String, Any>, isBitMask: Boolean) {
        val enumName = entry.key
        // the list of enum values within the parenthesis
        val valuesListString = Regex(STRING_PATTERN).findAll(entry.value.toString())
        val enumValuesList = hashMapOf<String, Int>()

        if (valuesListString.count() == 0) {
            printWarning("Empty values list for key \"$key\"")
        } else {
            valuesListString.single().value.split(',').let {
                it.forEachIndexed { index, it ->
                    if (it.contains(":")) {
                        // TODO: support bitmask references and evaluation
                    } else {
                        val enumKey = "${enumName}_${it.trim()}"
                        val enumValue = if (isBitMask) (1 shl index) else index
                        addResource(enumKey, enumValue.toString(), ResourceType.INTEGER)
                        enumValuesList[it.trim()] = enumValue
                    }
                }
                addEnum(enumName, enumValuesList)
                globalEnumsMap[enumName] = enumValuesList
            }
        }
    }

    override fun generate() {
        super.generate()
        if (global_documentType == DocumentType.ROOT) {
            StringBuilder().apply {
                append(AUTOGENERATED_CODE_HEADER)
                append("\npackage com.microsoft.stardust")

                globalEnumsMap.forEach {
                    append(generateCodeEnum(it.key.capitalize(), it.value))
                }

                toString().writeToResourceFile(
                        global_projectSourcePath.plus("main/java/com/microsoft/stardust/Enums.kt"),
                        "${globalEnumsMap.size} code enums"
                )
                global_enumsCount = globalEnumsMap.size
            }
        }
    }
}

fun generateCodeEnum(enumName: String, values: Map<String, Int>?): String =
        StringBuilder().run {
            append("\n\nenum class $enumName (val value: Int) {\n")

            if (values == null || values.isEmpty()) {
                printError("Empty enum values list for enum \"$enumName\"")
            } else {
                values.toList().sortedBy { (_, value) -> value }.toMap().forEach {
                    val valueName = when (enumName) {
                        "IconName" -> it.key // for icons, keep camelCase enum values
                        else -> it.key.toJavaEnumValueName()
                    }
                    append("\t${valueName}(${it.value}),\n")
                }
            }

            append("\n\t;companion object {")
            append("\n\t\tval map by lazy { $enumName.values().associateBy($enumName::value) }")
            append("\n\t\tfun fromValue(type: Int) = map[type]")
            append("\n\t\tval list by lazy { $enumName.values().associateBy($enumName::name) }")
            append("\n\t\tfun fromValue(type: String) = list[type.toUpperCase()]")
            append("\n\t}\n}")
            toString()
        }

private val allEnumsMap = hashMapOf<String, Map<String, Int>>()
private val globalEnumsMap = hashMapOf<String, Map<String, Int>>()

private fun addEnum(name: String, values: Map<String, Int>) {
    val nameKey = name.capitalize()
    if (allEnumsMap.containsKey(nameKey)) {
        //printError("Enum \"$name\" already defined!")
    } else {
        allEnumsMap[nameKey] = values
    }
}

fun getEnum(name: String): Map<String, Int>? = allEnumsMap[name.capitalize()]
fun getGlobalEnum(name: String): Map<String, Int>? = globalEnumsMap[name.capitalize()]