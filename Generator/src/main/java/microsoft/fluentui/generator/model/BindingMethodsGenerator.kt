package com.msft.stardust.model

import com.msft.stardust.AUTOGENERATED_CODE_HEADER
import com.msft.stardust.global_bindingMethodsCount
import com.msft.stardust.global_projectSourcePath
import java.io.File

val bindingMethodsFilePath = global_projectSourcePath.plus("main/java/com/microsoft/stardust/BindingMethods.kt")

fun clearBindingMappingFile() {
    File(bindingMethodsFilePath).apply {
        parentFile.mkdirs()
        writeText("$AUTOGENERATED_CODE_HEADER\npackage com.microsoft.stardust\n")
    }
}

fun addBindingMethods(viewName: String, mappings: Map<String, String>) {
    if (mappings.isNotEmpty()) {
        File(bindingMethodsFilePath).let { bindingFile ->
            if (!bindingFile.exists()) clearBindingMappingFile()

            bindingFile.writeText(
                bindingFile.readText() + mappings.toList().joinToString(
                    separator = ",\n",
                    prefix = "\n@androidx.databinding.BindingMethods(\n",
                    postfix = "\n) class ${viewName}BindingMethods\n",
                    // FIXME: viewName must match the component name.
                    //  The appearance proxy currently includes "Tokens" in its name.
                    transform = { "   androidx.databinding.BindingMethod(type = ${viewName.replace("Tokens", "")}::class, attribute = \"${it.first}\", method = \"${it.second}\")" })
            )

            global_bindingMethodsCount += mappings.size
        }
    }
}